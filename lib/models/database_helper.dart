import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class DBSchema {
  final int dbRevision = 1; // Current database version

  static const String dbInfoSchema = '''
      CREATE TABLE info (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        dbRevsion INTEGER NOT NULL,
        user TEXT NOT NULL,
        description TEXT NOT NULL,
        duration INTEGER NOT NULL
      )
    ''';
}

// Workouts needs id, date (iso), description (string), and duration (seconds, convert on demand)
// Calories needs id, date (iso), and total (int)

class WorkoutEntry {
  final int? id; // Auto-generated by SQLite
  final DateTime date; // Calendar day in Flutter DateTime format
  final String description; // Workout description as String
  final int duration; // Duration in integer seconds

  WorkoutEntry({
    this.id,
    required this.date,
    required this.description,
    required this.duration,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'date': date,
      'description': description,
      'duration': duration,
    };
  }

  factory WorkoutEntry.fromMap(Map<String, dynamic> map) {
    return WorkoutEntry(
      id: map['id'],
      date: map['date'],
      description: map['description'],
      duration: map['duration'],
    );
  }

  static const String dbSchema = '''
      CREATE TABLE workouts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        description TEXT NOT NULL,
        duration INTEGER NOT NULL
      )
    ''';
}

class CalorieEntry {
  final int? id; // Auto-generated by SQLite
  final DateTime date; // Calendar day in Flutter DateTime format
  final int total; // Total calories as an integer

  CalorieEntry({this.id, required this.date, required this.total});

  Map<String, dynamic> toMap() {
    return {'id': id, 'date': date, 'total': total};
  }

  factory CalorieEntry.fromMap(Map<String, dynamic> map) {
    return CalorieEntry(id: map['id'], date: map['date'], total: map['total']);
  }

  static const String dbSchema = '''
      CREATE TABLE calories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        total INTEGER NOT NULL
      )
    ''';
}

class Item {
  final int? id; // Auto-generated by SQLite
  final String name;
  final int completed;

  Item({this.id, required this.name, required this.completed});

  Map<String, dynamic> toMap() {
    return {'id': id, 'name': name, 'completed': completed};
  }

  factory Item.fromMap(Map<String, dynamic> map) {
    return Item(id: map['id'], name: map['name'], completed: map['completed']);
  }
}

class DBHelper {
  DBHelper._privateConstructor();
  static final DBHelper instance = DBHelper._privateConstructor();

  static Database? _database;

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initializeDatabase();
    return _database!;
  }

  Future<Database> _initializeDatabase() async {
    String path = join(await getDatabasesPath(), 'my_database.db');
    return await openDatabase(path, version: 1, onCreate: _createTable);
  }

  Future<void> _createTable(Database db, int version) async {
    await db.execute('''
      CREATE TABLE items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        completed INTEGER NOT NULL
      )
    ''');
  }

  Future<int> insertItem(Item item) async {
    final db = await database;
    return await db.insert('items', item.toMap());
  }

  Future<List<Item>> getItems() async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query('items');
    return List.generate(maps.length, (i) => Item.fromMap(maps[i]));
  }

  Future<int> updateItem(Item item) async {
    final db = await database;
    return await db.update(
      'items',
      item.toMap(),
      where: 'id = ?',
      whereArgs: [item.id],
    );
  }

  Future<int> markComplete(Item item) async {
    final db = await database;
    Map<String, dynamic> itemMap = item.toMap();
    if (itemMap['completed'] == 0) {
      itemMap.update('completed', (value) => 1);
    } else if (itemMap['completed'] == 1) {
      itemMap.update('completed', (value) => 0);
    }
    return await db.update(
      'items',
      itemMap,
      where: 'id = ?',
      whereArgs: [item.id],
    );
  }

  Future<int> markNotComplete(Item item) async {
    final db = await database;
    Map<String, dynamic> itemMap = item.toMap();
    itemMap.update('completed', (value) => 0);
    return await db.update(
      'items',
      itemMap,
      where: 'id = ?',
      whereArgs: [item.id],
    );
  }

  Future<int> deleteItem(int id) async {
    final db = await database;
    return await db.delete('items', where: 'id = ?', whereArgs: [id]);
  }
}
