import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class WorkoutEntry {
  final int? id; // Auto-generated by SQLite
  final DateTime date; // Calendar day in Flutter DateTime format
  final String description; // Workout description as String
  final int duration; // Duration in integer seconds

  WorkoutEntry({
    this.id,
    required this.date,
    required this.description,
    required this.duration,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'date': date.toIso8601String(),
      'description': description,
      'duration': duration,
    };
  }

  factory WorkoutEntry.fromMap(Map<String, dynamic> map) {
    return WorkoutEntry(
      id: map['id'],
      date: DateTime.parse(map['date']),
      description: map['description'],
      duration: map['duration'],
    );
  }

  static const String dbSchema = '''
      CREATE TABLE workouts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        description TEXT NOT NULL,
        duration INTEGER NOT NULL
      )
    ''';
}

class CalorieEntry {
  final int? id; // Auto-generated by SQLite
  final DateTime date; // Calendar day in Flutter DateTime format
  final int total; // Total calories as an integer

  CalorieEntry({this.id, required this.date, required this.total});

  Map<String, dynamic> toMap() {
    return {'id': id, 'date': date.toIso8601String(), 'total': total};
  }

  factory CalorieEntry.fromMap(Map<String, dynamic> map) {
    return CalorieEntry(
      id: map['id'],
      date: DateTime.parse(map['date']),
      total: map['total'],
    );
  }

  static const String dbSchema = '''
      CREATE TABLE calories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        total INTEGER NOT NULL
      )
    ''';
}

class DBHelper {
  DBHelper._privateConstructor();
  static final DBHelper instance = DBHelper._privateConstructor();

  static Database? _database;

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initializeDatabase();
    return _database!;
  }

  Future<Database> _initializeDatabase() async {
    String path = join(await getDatabasesPath(), 'my_database.db');
    return await openDatabase(path, version: 1, onCreate: _createTable);
  }

  Future<void> _createTable(Database db, int version) async {
    await db.execute('''
      CREATE TABLE workouts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        description TEXT NOT NULL,
        duration INTEGER NOT NULL
      )
    ''');
    await db.execute('''
      CREATE TABLE calories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        total INTEGER NOT NULL
      )
    ''');
  }

  Future<int> insertWorkout(WorkoutEntry entry) async {
    final db = await database;
    return await db.insert('workouts', entry.toMap());
  }

  Future<int> insertCalories(CalorieEntry entry) async {
    final db = await database;
    return await db.insert('calories', entry.toMap());
  }

  Future<List<WorkoutEntry>> getWorkouts() async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query('workouts');
    return List.generate(maps.length, (i) => WorkoutEntry.fromMap(maps[i]));
  }

  String _formatDate(DateTime date) {
    return '${date.year}-${date.month}-${date.day}%';
  }

  Future<List<WorkoutEntry>> getLastFiveDaysOfWorkouts() async {
    DateTime today = DateTime.now();
    DateTime day_1 = today.subtract(const Duration(days: 1));
    DateTime day_2 = today.subtract(const Duration(days: 2));
    DateTime day_3 = today.subtract(const Duration(days: 3));
    DateTime day_4 = today.subtract(const Duration(days: 4));
    String today_s = _formatDate(today);
    String day_1s = _formatDate(day_1);
    String day_2s = _formatDate(day_2);
    String day_3s = _formatDate(day_3);
    String day_4s = _formatDate(day_4);
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'workouts',
      where:
          "date LIKE '$today_s' OR date LIKE '$day_1s' OR date LIKE '$day_2s' OR date LIKE '$day_3s' OR date LIKE '$day_4s'",
    );
    return List.generate(maps.length, (i) => WorkoutEntry.fromMap(maps[i]));
  }

  Future<List<WorkoutEntry>> getWorkouts_today() async {
    DateTime today = DateTime.now();
    DateTime day_1 = today.subtract(const Duration(days: 1));
    DateTime day_2 = today.subtract(const Duration(days: 2));
    DateTime day_3 = today.subtract(const Duration(days: 3));
    DateTime day_4 = today.subtract(const Duration(days: 4));
    String today_s = _formatDate(today);
    String day_1s = _formatDate(day_1);
    String day_2s = _formatDate(day_2);
    String day_3s = _formatDate(day_3);
    String day_4s = _formatDate(day_4);
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'workouts',
      where: "date LIKE '$today_s'",
    );
    return List.generate(maps.length, (i) => WorkoutEntry.fromMap(maps[i]));
  }

  Future<List<WorkoutEntry>> getWorkouts_day1() async {
    DateTime today = DateTime.now();
    DateTime day_1 = today.subtract(const Duration(days: 1));
    DateTime day_2 = today.subtract(const Duration(days: 2));
    DateTime day_3 = today.subtract(const Duration(days: 3));
    DateTime day_4 = today.subtract(const Duration(days: 4));
    String today_s = _formatDate(today);
    String day_1s = _formatDate(day_1);
    String day_2s = _formatDate(day_2);
    String day_3s = _formatDate(day_3);
    String day_4s = _formatDate(day_4);
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'workouts',
      where: "date LIKE '$day_1s'",
    );
    return List.generate(maps.length, (i) => WorkoutEntry.fromMap(maps[i]));
  }

  Future<List<WorkoutEntry>> getWorkouts_day2() async {
    DateTime today = DateTime.now();
    DateTime day_1 = today.subtract(const Duration(days: 1));
    DateTime day_2 = today.subtract(const Duration(days: 2));
    DateTime day_3 = today.subtract(const Duration(days: 3));
    DateTime day_4 = today.subtract(const Duration(days: 4));
    String today_s = _formatDate(today);
    String day_1s = _formatDate(day_1);
    String day_2s = _formatDate(day_2);
    String day_3s = _formatDate(day_3);
    String day_4s = _formatDate(day_4);
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'workouts',
      where: "date LIKE '$day_2s'",
    );
    return List.generate(maps.length, (i) => WorkoutEntry.fromMap(maps[i]));
  }

  Future<List<WorkoutEntry>> getWorkouts_day3() async {
    DateTime today = DateTime.now();
    DateTime day_1 = today.subtract(const Duration(days: 1));
    DateTime day_2 = today.subtract(const Duration(days: 2));
    DateTime day_3 = today.subtract(const Duration(days: 3));
    DateTime day_4 = today.subtract(const Duration(days: 4));
    String today_s = _formatDate(today);
    String day_1s = _formatDate(day_1);
    String day_2s = _formatDate(day_2);
    String day_3s = _formatDate(day_3);
    String day_4s = _formatDate(day_4);
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'workouts',
      where: "date LIKE '$day_3s'",
    );
    return List.generate(maps.length, (i) => WorkoutEntry.fromMap(maps[i]));
  }

  Future<List<WorkoutEntry>> getWorkouts_day4() async {
    DateTime today = DateTime.now();
    DateTime day_1 = today.subtract(const Duration(days: 1));
    DateTime day_2 = today.subtract(const Duration(days: 2));
    DateTime day_3 = today.subtract(const Duration(days: 3));
    DateTime day_4 = today.subtract(const Duration(days: 4));
    String today_s = _formatDate(today);
    String day_1s = _formatDate(day_1);
    String day_2s = _formatDate(day_2);
    String day_3s = _formatDate(day_3);
    String day_4s = _formatDate(day_4);
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'workouts',
      where: "date LIKE '$day_4s'",
    );
    return List.generate(maps.length, (i) => WorkoutEntry.fromMap(maps[i]));
  }

  Future<List<CalorieEntry>> getCalories() async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query('calories');
    return List.generate(maps.length, (i) => CalorieEntry.fromMap(maps[i]));
  }

  Future<int> updateWorkout(WorkoutEntry entry) async {
    final db = await database;
    return await db.update(
      'workouts',
      entry.toMap(),
      where: 'id = ?',
      whereArgs: [entry.id],
    );
  }

  Future<int> updateCalories(CalorieEntry entry) async {
    final db = await database;
    return await db.update(
      'calories',
      entry.toMap(),
      where: 'id = ?',
      whereArgs: [entry.id],
    );
  }

  Future<int> deleteWorkout(int id) async {
    final db = await database;
    return await db.delete('workouts', where: 'id = ?', whereArgs: [id]);
  }

  Future<int> deleteCalories(int id) async {
    final db = await database;
    return await db.delete('calories', where: 'id = ?', whereArgs: [id]);
  }
}
